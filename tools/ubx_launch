#!/usr/bin/env luajit
-- -*- lua -*-

local ubx = require("ubx")
local bd = require("blockdiagram")
local utils = require("utils")
local json = require("cjson")
local ts = tostring

local function usage()
   print( [=[
microblx function block model system launcher
   usage: ubx_launch OPTIONS -c <conf file>
      -c               .usc or .json model file to launch
      -nodename        name to give to node
      -validate        don't run, just validate configuration file
      -webif <port>    create and start a webinterface block. Optional port defaults to 8888.
      -h               show this.
]=])
end

--- read model file from usc or json
-- @param fn filename
-- @return suc, model
local function read_model(fn)

   local function read_json()
      local f = assert(io.open(fn, "r"))
      local data = json.decode(f:read("*all"))
      return bd.system(data)
   end

   local ext = string.match(fn, "^.+%.(.+)$")
   local suc, mod
   if ext == 'json' then
      suc, mod = pcall(read_json, fn)
   elseif ext == 'usc' or ext == 'lua' then
      suc, mod = pcall(dofile, fn)
   else
      print("ubx_launch error: unknown extension "..tostring(ext))
      os.exit(1)
   end
   return suc, mod
end

local opttab=utils.proc_args(arg)
local nodename="node-"..os.date("%Y%m%d_%H%M%S")
local conf_file

if #arg==1 or opttab['-h'] then
   usage(); os.exit(1)
end

if not (opttab['-c'] and opttab['-c'][1]) then
   print("no configuration file given (-c option)")
   os.exit(1)
else
   conf_file = opttab['-c'][1]
end

local suc, model = read_model(conf_file)

if not suc then
   print(model)
   print("ubx_launch failed to load file "..ts(conf_file))
   os.exit(1)
end

if opttab['-nodename'] then
   if not opttab['-nodename'][1] then
      print("-nodename option requires a node name argument)")
      os.exit(1)
   else
      nodename = opttab['-nodename'][1]
   end
end

if opttab['-validate'] then
   model:validate(true)
   os.exit(1)
end

ni = model:launch{nodename=nodename, verbose=true}

if opttab['-webif'] then
   local port = opttab['-webif'][1] or 8888
   print("starting up webinterface block (port: "..ts(port)..")")
   ubx.load_module(ni, "webif")
   local webif1=ubx.block_create(ni, "webif/webif", "webif1", { port=ts(port) })
   assert(ubx.block_init(webif1)==0)
   assert(ubx.block_start(webif1)==0)
end

if not opttab['-i'] then
   while true do
      ubx.clock_mono_sleep(60)
   end
end
